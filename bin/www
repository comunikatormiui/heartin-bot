#!/usr/bin/env node


var request = require('request');
var cheerio = require('cheerio');
var html2json = require('html2json').html2json;

var os = require('os');
if (os.platform() == 'win32') {
    var chilkat = require('chilkat_win32');
} else if (os.platform() == 'linux') {
    if (os.arch() == 'x86') {
        var chilkat = require('chilkat_linux32');
    } else {
        var chilkat = require('chilkat_linux64');
    }
} else if (os.platform() == 'darwin') {
    var chilkat = require('chilkat_macosx');
}


// var htmlToText = require('html-to-text');

request('http://eurheartj.oxfordjournals.org/content/early/2016/05/19/eurheartj.ehw128', function (error, response, html) {
    if (!error && response.statusCode == 200) {
        // parser.parseComplete(html);
        // var text = htmlToText.fromString(html, {
        //     wordwrap: 130
        // });
        // console.log(text);

//         var json = html2json(html);
//         console.log(json);
         var $ = cheerio.load(html);
//
//         console.log('Start parsing');
        var isParsed = false;

        $('#sticky_navigation ul').filter(function() {
            if (isParsed) return;
            var data = $(this);
            var listOfArticleTopics = data[0].children[0].children[1].children[0].children;
            var topics = [];

            for (var i = 0; i < listOfArticleTopics.length; i++) {
                var topic = listOfArticleTopics[i];
                //console.log('Topic->' + topic.children[0].children[0].data + '\n');
                topics.push(topic.children[0].children[0].data);
            }

            $('#content-block-markup').filter(function() {
                var textHtml = $(this).html();

                var h2t = new chilkat.HtmlToText();

                //  Any string argument automatically begins the 30-day trial.
                var success = h2t.UnlockComponent("30-day trial");
                if (success != true) {
                    console.log(h2t.LastErrorText);
                    return;
                }
                var text = h2t.ToText(textHtml);

                // // Let's store the data we filter into a variable so we can easily see what's going on.
                // var text = htmlToText.fromString(textHtml, {
                //     wordwrap: 130
                // });
                //console.log(text);

                var arrayLines = text.split("\n");

                var formattedDict = {};

                for (var i = 0; i < topics.length-1; i++) {
                    var title = topics[i];
                    console.log(' start topic title->' + title)

                    var titleNext = topics[i+1];
                    var startLine;
                    var stopLine;
                    for (var j = 0; j < arrayLines.length; j++) {
                        var line = arrayLines[j];
                        if (line.indexOf('</') > -1) {
                            line = line.replace('</','<http://eurheartj.oxfordjournals.org/');
                            arrayLines[j] = line;
                        }

                        if (line.toLowerCase().indexOf(title.toLowerCase()) > -1) {
                            startLine = j;
                        }
                        if (line.toLowerCase().indexOf(titleNext.toLowerCase()) > -1) {
                            stopLine = j;
                        }
                    }
                    var subarray = arrayLines.slice(startLine,stopLine);
                    var textSeparated = subarray.join("\n");
                    console.log('topic block->' + textSeparated);
                    formattedDict[title] = textSeparated;
                }
                
                isParsed = true;

            });
            console.log('End parsing');

        });


//
    }
});

// var Xray = require('x-ray');
// var x = Xray();
//
//
// //x('http://eurheartj.oxfordjournals.org/content/36/44/3075', ['h2'])(console.log)
//
// x('http://eurheartj.oxfordjournals.org/content/36/44/3075', ['inner-collapsable-content-wrapper'])(console.log)

// var parse5 = require('parse5');
// var http = require('http');
//
// // Fetch the google.com content and obtain it's <body> node
// http.get('http://eurheartj.oxfordjournals.org/content/early/2016/05/23/eurheartj.ehw106', function(res) {
//     var parser = new parse5.ParserStream();
//
//     parser.on('finish', function() {
//         var document = parser.document;
//         console.log(document);
//     });
//
//     res.pipe(parser);
// });


// var _ = require('underscore'),
//     PDFParser = require('pdf2json');
//
// var pdfParser = new PDFParser();
//
// var _onPDFBinDataReady = function (pdf) {
//     console.log('Loaded pdf:\n');
//     for (var i in pdf.formImage.Pages) {
//         var page = pdf.formImage.Pages[i];
//         for (var j in page.Texts) {
//             var text = page.Texts[j];
//             console.log(text.R[0].T);
//         }
//     }
// };
//
// // Create an error handling function
// var _onPDFBinDataError = function (error) {
//     console.log(error);
// };
//
// // Use underscore to bind the data ready function to the pdfParser
// // so that when the data ready event is emitted your function will
// // be called. As opposed to the example, I have used `this` instead
// // of `self` since self had no meaning in this context
// pdfParser.on('pdfParser_dataReady', _.bind(_onPDFBinDataReady, this));
//
// // Register error handling function
// pdfParser.on('pdfParser_dataError', _.bind(_onPDFBinDataError, this));
//
// // Construct the file path of the pdf
// var pdfFilePath = 'bin/example.pdf';
//
// // Load the pdf. When it is loaded your data ready function will be called.
// pdfParser.loadPDF(pdfFilePath);

//
// /**
//  * Module dependencies.
//  */
//
// var app = require('../app');
// var debug = require('debug')('heartin-bot:server');
// var http = require('http');
//
// /**
//  * Get port from environment and store in Express.
//  */
//
// var port = normalizePort(process.env.PORT || '3000');
// app.set('port', port);
//
// /**
//  * Create HTTP server.
//  */
//
// var server = http.createServer(app);
//
// /**
//  * Listen on provided port, on all network interfaces.
//  */
//
// server.listen(port);
// server.on('error', onError);
// server.on('listening', onListening);
//
// /**
//  * Normalize a port into a number, string, or false.
//  */
//
// function normalizePort(val) {
//   var port = parseInt(val, 10);
//
//   if (isNaN(port)) {
//     // named pipe
//     return val;
//   }
//
//   if (port >= 0) {
//     // port number
//     return port;
//   }
//
//   return false;
// }
//
// /**
//  * Event listener for HTTP server "error" event.
//  */
//
// function onError(error) {
//   if (error.syscall !== 'listen') {
//     throw error;
//   }
//
//   var bind = typeof port === 'string'
//     ? 'Pipe ' + port
//     : 'Port ' + port;
//
//   // handle specific listen errors with friendly messages
//   switch (error.code) {
//     case 'EACCES':
//       console.error(bind + ' requires elevated privileges');
//       process.exit(1);
//       break;
//     case 'EADDRINUSE':
//       console.error(bind + ' is already in use');
//       process.exit(1);
//       break;
//     default:
//       throw error;
//   }
// }
//
// /**
//  * Event listener for HTTP server "listening" event.
//  */
//
// function onListening() {
//   var addr = server.address();
//   var bind = typeof addr === 'string'
//     ? 'pipe ' + addr
//     : 'port ' + addr.port;
//   debug('Listening on ' + bind);
// }
