#!/usr/bin/env node


var request = require('request');
var cheerio = require('cheerio');
var html2json = require('html2json').html2json;

var os = require('os');
if (os.platform() == 'win32') {
    var chilkat = require('chilkat_win32');
} else if (os.platform() == 'linux') {
    if (os.arch() == 'x86') {
        var chilkat = require('chilkat_linux32');
    } else {
        var chilkat = require('chilkat_linux64');
    }
} else if (os.platform() == 'darwin') {
    var chilkat = require('chilkat_macosx');
}

var url = 'mongodb://localhost:27017/heartin-bot';
var MongoClient = require('mongodb').MongoClient;
var assert = require('assert');
var h2t = new chilkat.HtmlToText();
var success = h2t.UnlockComponent("30-day trial");
if (success != true) {
    console.log(h2t.LastErrorText);
    return;
}

var dbMain;

// var _ = require('underscore'),
//     PDFParser = require('pdf2json');
//
// var pdfParser = new PDFParser();
//
// var _onPDFBinDataReady = function (pdf) {
//     console.log('Loaded pdf:\n');
//     var isTableOfContextProcessing = false;
//     var table = {};
//     var buffer = [];
//
//     for (var i in pdf.formImage.Pages) {
//         var page = pdf.formImage.Pages[i];
//
//         for (var j in page.Texts) {
//             var text = page.Texts[j];
//             var textString = text.R[0].T;
//             console.log(textString);
//             buffer.push(textString);
//             if (textString.indexOf('Contents') > -1) {
//                 var previousString = buffer[buffer.length - 2];
//                 var previousPreviousString = buffer[buffer.length - 3];
//                 if (previousString === 'of' && previousPreviousString === 'Table')
//                 {
//                     // here is start table of contents
//                     console.log('Start');
//                     isTableOfContextProcessing = true;
//                 }
//             }
//             if (textString.indexOf('References') > -1) {
//
//                 var previousString = buffer[buffer.length - 2];
//                 if (previousString === '7.'){
//                     console.log('Stop');
//                     isTableOfContextProcessing = false;
//                 }
//
//             }
//             if (isTableOfContextProcessing) {
//                 if (table[i][text.y] !== undefined) {
//                     var savedText = table[i][text.y];
//                     savedText = savedText + ' ' + textString;
//                     table[i][text.y] = savedText
//                 } else table[i][text.y]=textString
//
//             }
//         }
//         console.log('Stop');
//
//     }
// };
//
// // Create an error handling function
// var _onPDFBinDataError = function (error) {
//     console.log(error);
// };
//
// // Use underscore to bind the data ready function to the pdfParser
// // so that when the data ready event is emitted your function will
// // be called. As opposed to the example, I have used `this` instead
// // of `self` since self had no meaning in this context
// pdfParser.on('pdfParser_dataReady', _.bind(_onPDFBinDataReady, this));
//
// // Register error handling function
// pdfParser.on('pdfParser_dataError', _.bind(_onPDFBinDataError, this));
//
// // Construct the file path of the pdf
// var pdfFilePath = 'bin/example.pdf';
//
// // Load the pdf. When it is loaded your data ready function will be called.
// pdfParser.loadPDF(pdfFilePath);
//
//
//
// return;


// var pdfUtil = require('pdf-to-text');
// var pdf_path = "bin/example.pdf";
//
// pdfUtil.info(pdf_path, function(err, info) {
//     if (err) throw(err);
//     console.log(info);
// });
//
//
// pdfUtil.pdfToText(pdf_path, function(err, data) {
//     if (err) throw(err);
//     console.log(data); //print all text
// });

// var PdfReader = require("../node_modules/pdfreader/index.js").PdfReader;
//
// new PdfReader().parseFileItems('bin/example.pdf', function(err, item){
//     if (err)
//         console.log(err);
//     else if (!item)
//         console.log();
//     else if (item.file)
//         console.log("file =", item.file.path);
//     else if (item.page)
//         console.log("page =", item.page);
//     else if (item.x)
//         console.log([item.x, item.y, item.oc, item.A, Math.floor(item.w), item.text].join("\t"));
//     else
//         console.warn(item);
// });


// const actions = {
//     say(sessionId, context, message, cb) {
//         console.log(message);
//         cb();
//     },
//     merge(sessionId, context, entities, message, cb) {
//         cb(context);
//     },
//     error(sessionId, context, error) {
//         console.log(error.message);
//     },
// };
// const Wit = require('node-wit').Wit;
// const client = new Wit('ZGKQ2GAD4WXFIYLJLRHTUDWQU7UEQ5PM', actions);
// const context = {};
// const session = 'my-user-session-42';
// const context0 = {};
// client.runActions(session, 'what is the weather in London?', context0, (e, context1) => {
//     if (e) {
//         console.log('Oops! Got an error: ' + e);
//         return;
//     }
//     console.log('The session state is now: ' + JSON.stringify(context1));
//     client.runActions(session, 'and in Brussels?', context1, (e, context2) => {
//         if (e) {
//             console.log('Oops! Got an error: ' + e);
//             return;
//         }
//         console.log('The session state is now: ' + JSON.stringify(context2));
//     });
// });

// var apiai = require('apiai');
//
// var app = apiai("54664764b78e4bc289e6ff2a3cec7a75");
//
// var request = app.textRequest('Please tell me more about CVD');
//
// request.on('response', function(response) {
//     console.log(response);
// });
//
// request.on('error', function(error) {
//     console.log(error);
// });
//
// request.end()

function startBot() {
    // Create bot and add dialogs
    var bot = new builder.BotConnectorBot({ appId: 'heartin', appSecret: '71b2e204ae924a3a9f7bccaaeb834d6b' });

    bot.add('/', new builder.CommandDialog()
        .matches('^search', function (session) {
            var text = session.message.text;
            text = text.replace('search','');
            var textWithoutSpaces = text.replace(' ','');
            if (textWithoutSpaces.length == 0) {
                session.send("nothing to search please write words");

            } else {
                text = text.slice(1);
                session.send("I start searching for->" + text);

                dbMain.collection('guides').find({"title": new RegExp(text, 'i')}).toArray(function(err, items) {
                    if (err) {
                        console.error(err);
                        return;
                    }
                    if(items.length == 0)
                        session.send("finded zero items");
                    else {
                        items.forEach(function(guide) {
                            session.send("From: " + guide.mainTitle);
                            session.send("Title: " + guide.title);
                            session.send(guide.text);
                        });
                    }


                });

            }

            console.log(session.message);

        })
        .onDefault(function (session) {
            session.send("I didn't understand. Say search <what you like to search> to me!");
        }));


// Setup Restify Server
    var server = restify.createServer();
    server.post('/api/messages', bot.verifyBotFramework(), bot.listen());

    function respond(req, res, next) {
        res.send('hello ' + req.params.name);
        console.log('Received ' +req.params.name);
        next();
    }
    server.get('/webhook', respond);

    server.listen(process.env.port || 3978, function () {
        console.log('%s listening to %s', server.name, server.url);
    });
}

MongoClient.connect(url, function(err, db) {
    dbMain = db;

    db.collection('guides').createIndex(
        { "title": 1,"mainTitle": 1 },
        { unique: true },
        function(err, results) {
            assert.equal(err, null);
            console.log(results);
        }
    );
    assert.equal(null, err);
    console.log("Connected correctly to server.");


    // db.collection('guides').find({"title": new RegExp('intervene', 'i')}).toArray(function(err, items) {
    //     if (err) {
    //         console.error(err);
    //         return;
    //     }
    //     console.log(items);
    // });





    startBot();

    if (true) {
        // PARSING
        var links = [
            'http://eurheartj.oxfordjournals.org/content/early/2016/05/23/eurheartj.ehw106', //CVD Prevention in clinical practice (European Guidelines on)
            'http://eurheartj.oxfordjournals.org/content/early/2016/05/19/eurheartj.ehw128', //Acute and Chronic Heart Failure
            'http://eurheartj.oxfordjournals.org/content/36/44/3075', //Infective Endocarditis (Guidelines on Prevention, Diagnosis and Treatment of)
            'http://eurheartj.oxfordjournals.org/content/36/41/2793', //Ventricular Arrhythmias and the Prevention of Sudden Cardiac Death
            'http://eurheartj.oxfordjournals.org/content/36/42/2921', // Pericardial Diseases (Guidelines on the Diagnosis and Management of)
            'http://eurheartj.oxfordjournals.org/content/37/3/267', // Acute Coronary Syndromes (ACS) in patients presenting without persistent ST-segment elevation (Management of)
            'http://eurheartj.oxfordjournals.org/content/37/1/67', //Pulmonary Hypertension (Guidelines on Diagnosis and Treatment of)
            'http://eurheartj.oxfordjournals.org/content/early/2014/08/28/eurheartj.ehu284', //Hypertrophic Cardiomyopathy
            'http://eurheartj.oxfordjournals.org/content/early/2014/08/28/eurheartj.ehu281', //Aortic Diseases
            'http://eurheartj.oxfordjournals.org/content/early/2014/08/28/eurheartj.ehu278', // ESC/EACTS Guidelines on Myocardial Revascularisation
            // '',
            // '',
            // '',
            // '',
            // '',
            // '',
            // '',
            // '',
            // '',
            // '',
            // '',
            // '',
            // ''
        ];




        request(links[5], function (error, response, html) {
            if (!error && response.statusCode == 200) {
                var $ = cheerio.load(html);
                $('.highwire-cite-title-wrap').filter(function() {
                    var dataMainTitle = $(this);
                    var dataMainTitleString = dataMainTitle[0].children[0].children[0].data;
                    if (dataMainTitleString.length <= 0)
                        console.error('no main title');

                    $('h2').each(function(i, elem) {
                        console.log('i->' + i + ' parent.class->' + elem.parent.attribs.class + ' text->' + elem.children[0].data);
                        if (elem.parent.attribs.class !== undefined && elem.parent.attribs.class.indexOf('section') > -1){
                            var childrens = elem.parent.children;
                            childrens.shift();
                            var html = $(elem.parent).html();
                            var text = h2t.ToText(html);
                            text = text.replace('</','<http://eurheartj.oxfordjournals.org/');
                            var formattedDict = {};
                            formattedDict['mainTitle'] = dataMainTitleString;
                            formattedDict['title'] = elem.children[0].data;
                            formattedDict['text'] = text;
                            if (text.length <= 0)
                                console.error('no text ');
                            if (elem.children[0].data.length <= 0)
                                console.error('no title');
                            db.collection('guides').insertOne(formattedDict, function(err, result) {
                                if (err)
                                    console.error(err);
                                else console.log("Inserted a document into the collection guides.");
                            });
                            //console.log(text);
                        }
                        // console.error($(this).text());
                    });


                    console.log('End parsing');

                });


//
            }

        });
    }

});

// var Xray = require('x-ray');
// var x = Xray();
//
//
// //x('http://eurheartj.oxfordjournals.org/content/36/44/3075', ['h2'])(console.log)
//
// x('http://eurheartj.oxfordjournals.org/content/36/44/3075', ['inner-collapsable-content-wrapper'])(console.log)

// var parse5 = require('parse5');
// var http = require('http');
//
// // Fetch the google.com content and obtain it's <body> node
// http.get('http://eurheartj.oxfordjournals.org/content/early/2016/05/23/eurheartj.ehw106', function(res) {
//     var parser = new parse5.ParserStream();
//
//     parser.on('finish', function() {
//         var document = parser.document;
//         console.log(document);
//     });
//
//     res.pipe(parser);
// });

var restify = require('restify');
var builder = require('botbuilder');
// var model = 'https://api.projectoxford.ai/luis/v1/application?id=c413b2ef-382c-45bd-8ff0-f76d60e2a821&subscription-key=d77c589be95843659e93b31b5621741d&q=';
// var dialog = new builder.LuisDialog(model);






// //
// /**
//  * Module dependencies.
//  */
//
// var app = require('../app');
// var debug = require('debug')('heartin-bot:server');
// var http = require('http');
//
// /**
//  * Get port from environment and store in Express.
//  */
//
// var port = normalizePort(process.env.PORT || '3000');
// app.set('port', port);
//
// /**
//  * Create HTTP server.
//  */
//
// var server = http.createServer(app);
//
// /**
//  * Listen on provided port, on all network interfaces.
//  */
//
// server.listen(port);
// server.on('error', onError);
// server.on('listening', onListening);
//
// /**
//  * Normalize a port into a number, string, or false.
//  */
//
// function normalizePort(val) {
//   var port = parseInt(val, 10);
//
//   if (isNaN(port)) {
//     // named pipe
//     return val;
//   }
//
//   if (port >= 0) {
//     // port number
//     return port;
//   }
//
//   return false;
// }
//
// /**
//  * Event listener for HTTP server "error" event.
//  */
//
// function onError(error) {
//   if (error.syscall !== 'listen') {
//     throw error;
//   }
//
//   var bind = typeof port === 'string'
//     ? 'Pipe ' + port
//     : 'Port ' + port;
//
//   // handle specific listen errors with friendly messages
//   switch (error.code) {
//     case 'EACCES':
//       console.error(bind + ' requires elevated privileges');
//       process.exit(1);
//       break;
//     case 'EADDRINUSE':
//       console.error(bind + ' is already in use');
//       process.exit(1);
//       break;
//     default:
//       throw error;
//   }
// }
//
// /**
//  * Event listener for HTTP server "listening" event.
//  */
//
// function onListening() {
//   var addr = server.address();
//   var bind = typeof addr === 'string'
//     ? 'pipe ' + addr
//     : 'port ' + addr.port;
//   debug('Listening on ' + bind);
// }
